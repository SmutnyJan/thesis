\chapter{Realizace}
% Popis implementace/realizace se zaměřením na nestandardní části řešení.
% Architektonické obrázky. (class diagram asi ne)
Implementace aplikace proběhla bez větších zádrhelů, co se architektonické stránky týče, o~to horší to ale bylo s funkčností v jednotlivých zařízeních. Kapitola se věnuje volbě použitých technologií; tomu, jak by vypadala ideální implementace, kdyby vše fungovalo, jak má; finální implementaci a omezením mobilních zařízení a prohlížečů, které způsobily, že se finální aplikace od ideální liší.

\section{Volba použitých technologií}
Aplikaci jsem začal implementovat nejprve v Javě, později jsem ji, když jsem se dostal do pasti a nemohl splnit některé požadavky, zavrhl a přešel na kombinaci XHTML, ECMAScriptu, CSS a obrázku.
\subsection{Java Platform, Micro Edition}
Java Platform, Micro Edition je verze Javy speciálně uzpůsobená pro běh na mobilních zařízeních, je velmi rozšířená a zpočátku se tedy zdála jako jasná volba. Java ME nabízí dva základní programátorské přístupy k tvorbě uživatelského rozhraní -- Low Level API a High Level API, jejich porovnání se nachází v tabulce \ref{tab:lowLevelApiVsHighLevelApi}. 

\begin{table}
\begin{center}
\begin{threeparttable}
\begin{tabular}{|l|c|c|c|}
\hline
\textbf{Charakteristika} & \textbf{Důležitost} & \textbf{Low Level API} & \textbf{High Level API} \\
\hline
\textbf{Přenositelnost} & Vysoká & Nízká & Vysoká \\
\textbf{Vlastní komponenty}\tnote{a} & Vysoká & Ano & Omezeně \\
\textbf{Klávesové zkratky} & Nízká & Ano & Spíše ne\tnote{b} \\
\textbf{Integrace s prostředím} & Střední & Ne & Ano \\
\textbf{Abstrakce implementace} & Střední & Nízká & Vysoká \\
\hline
\end{tabular}
\begin{tablenotes}
\item[a] Tvorba vlastních komponent, například našeptávání u vyhledávacího formuláře.
\item[b] Pouze položkám v menu automaticky nabízejí některé klávesové zkratky.
\end{tablenotes}
\caption{Porovnání Low Level API a High Level API}
\label{tab:lowLevelApiVsHighLevelApi}
\end{threeparttable}
\end{center}
\end{table}

Z tabulky je patrné, že ani jeden přístup není úplně ideální, Low Level API není dost dobře přenositelné na zařízení s jinou velikostí displeje, což odporuje požadavku na multiplatformnost, a High Level API neumožňuje vytvořit našeptávání u vyhledávání, ani jiné, daleko drobnější, změny, byť jen vzhledu, což zase odporuje jiným požadavkům.

Dalším problémem je její, v poslední době stále menší, podpora ze strany zařízení -- mobilní telefony se neustále zdokonalují, více jich má v sobě operační systémy a s nimi začínají podporovat spíše nativní aplikace a Javu už v mnoha případech ani neimplementují. Z těchto důvodů jsem Javu ME zavrhl.

\subsection{XHTML, ECMAScript, CSS a obrázek}
XHTML pro prezentaci informací, ECMAScript pro jejich dynamickou editaci a CSS pro úpravu vzhledu jsou ne úplně ideální technologie, ale fungují téměř všude. Je tu ale jedno veliké omezení, potřebují pro svůj běh webový prohlížeč. Vývoj telefonů, který podporu Javy ME omezil, podporu této kombinace naopak podpořil. Webové prohlížeče jsou dostupné i~pro telefony podporující Javu ME,\footnote{Pozor, nejznámější freewarový mobilní prohlížeč Opera Mini \cite{OperaMini} potřebuje ke zpracování stránky připojení k Internetu, sama stránku nezpracuje, stáhne ji předzpracovanou z proxy serverů Opery.} takže by měla být multiplatformnost tohoto řešení větší. Dalšími omezeními jsou nízký výkon a absence práce se soubory.

Pro pokud možno co nejširší kompatibilitu byly zvoleny následující verze těchto technologií:
\begin{itemize}
\item XHTML Mobile Profile 1.1 (specifikace \cite{XhtmlMpDoc}),
\item ECMAScript Mobile Profile 1.0 (specifikace \cite{EsMpDoc}),
\item CSS 2.1\footnote{CSS verze 2.1 trochu vybočuje z požadavků na širokou kompatibilitu, je poměrně rozsáhlá, v aplikaci jí je použita ale pouze úzká podmnožina, zejména poměrně široce podporovaná vlastnost \texttt{max-width}.} (specifikace \cite{CssDoc}).
\end{itemize}

\subsubsection{Frameworky}
V mnoha případech se vyplatí použít nějaký framework -- nabízejí různé funkcionality nad rámec standardní výbavy jazyka, mobilní frameworky zejména přizpůsobují vzhled nativním aplikacím, v tomto případě to ale není potřeba -- aplikace toho nemá moc nabízet a~frameworkem by akorát zbytečně narůstala velikost. 

\subsubsection{Obrázky}
Obrázek je v aplikaci potřeba zobrazit v podstatě jediný, o to je ale důležitější -- navigační plán.

Vzhledem k velikým plochám jediného odstínu ihned odpadá použití formátu JPEG, obrázky by byly plné artefaktů a navíc veliké. 

Formát GIF poměrně dobře odpovídá našemu záměru, nejrozšířenější verze podporuje pouze 256 barev na obrázek, to ale pro několika barevné plány nevadí, vejdou se do toho i~s~barvami nutnými na přechody. Testováním ale vyšlo najevo, že jsou požadované obrázky ve formátu GIF větší, než v PNG.

Neoficiální nástupce GIFu, formát PNG, je vítězem, co se týče velikosti dat, přesto má i~jiné výhody -- nabízí například větší množství barev v obrázku a lepší implementaci průhlednosti.

Posledním testovaným formátem je SVG. To je skoro ve všech ohledech ideálním formátem, jenom s jeho podporou to je horší (viz \ref{sec:omezeniProhlizecu}). SVG verze navigačního plánu je sice přibližně třikrát větší, než PNG, umožňuje ale jednu podstatnou věc -- ECMAScriptové skriptování. Parametrem tak lze zadat skriptu obsaženému v obrázku, která místnost se má označit, a on to provede, nahradíme tak všechny plány jednoho patra jediným obrázkem a ušetřená velikost je rázem mnohonásobná. Z vnějšku se dá obrázek ovlivňovat několika způsoby:
\begin{itemize}
\item Parsování obrázku -- obrázek se dá vytvořit celý ECMAScriptem (SVG je na bázi XML) a podsunout elementu zobrazujícímu SVG obrázky za použití data URL schéma \cite{DataUrlDoc}.
\item Volání obrázku s parametrem v URL -- pomocí ECMAScriptu lze uvnitř obrázku odchytit, jaké parametry mu byly v URL zadány. Vytvořeno podle \cite{SvgParamsDoc}.
\item Pomocí elementu \texttt{<param>} -- pomocí ECMAScriptu lze uvnitř obrázku odchytit i hodnotu vnořeného elementu \texttt{<param>} do elementu \texttt{<object>}, výhodu to má i tu, že prohlížeče, které neumí pracovat s parametry v URL, zvládnou obrázek zobrazit, výhoda je ale pouze polovičatá, takové prohlížeče pravděpodobně nezvládnou param zpracovat a hodnota se do obrázku nepředá. Vytvořeno podle \cite{SvgParamsDoc}.
\end{itemize}

Výše uvedené postupy jsou ukázány na přiloženém CD.

Formát SVG bohužel musel být zavržen kvůli různým omezením mobilních prohlížečů (viz sekce \ref{sec:omezeniProhlizecu}).

\subsubsection{Ukládání dat}
Ukládání dat by se mohlo zdát s použitými technologiemi jako problém, přesto ale některé věci ukládat lze. V našem případě by se mohly ukládat některé textové záznamy -- nastavení aplikace, nejčastěji hledané místnosti, uživatelské poznámky a podobně. Na žádnou z těchto funkcí ale nebyl vznesen požadavek, a tak v aplikaci implementované nejsou. Ukázka ukládání dat do Cookies je přesto přiložena na CD.



\section{Ideální implementace}
V průběhu implementace aplikace bylo naraženo na mnoho omezení mobilních zařízení (viz sekce \ref{sec:omezeniZarizeni}) a mobilních prohlížečů (viz sekce \ref{sec:omezeniProhlizecu}). Hodně jich je způsobeno omezenými možnostmi mobilních zařízení (v porovnání s počítači), přesto se objevila i taková omezení, která jsou přímo chybou nějakého široce používaného prohlížeče, a proto musel být vymyšlen nějaký jiný způsob jak daný problém vyřešit, aniž by aplikace v daném prohlížeči přestala fungovat.

Některé chyby se nepodařilo opravit tak, aby zůstala původní funkčnost zachována v plné míře, a aplikace tak byla degradována. V této sekci se nachází letmé seznámení s aplikací, jak by mohla vypadat v ideálním světě, ale jak nakonec nebyla kompletně implementována.

\subsection{Použití SVG}
V ideální implementaci by mapu podlaží (v ideálním případě i budovy) tvořil jeden SVG obrázek, kterému by se parametrem předala hledaná místa, a on by za pomocí ECMAScriptu zobrazil výsledek, což by přineslo hned několik výhod:
\begin{itemize}
 \item Obrázek by se dobře škáloval na každou velikost displeje a nebyl by problém ho pro zobrazení detailu dostatečně přiblížit.
 \item Nebyl by problém zobrazit na jednom plánku výchozí i cílové místo a případně i jinak optimalizovat obrázek podle uživatelových požadavků -- v reálném světě se na nic takového spoléhat nelze -- prohlížeče mají se SVG problémy a dosahování stejných efektů například pomocí překrývajících se PNG obrázků, kde jedna vrstva reprezentuje prázdnou mapu, ostatní pak cílový a výchozí bod a další objekty, také nelze -- prohlížeče si obrázky optimalizují pro malé obrazovky a přesně napozicované vrstvy rozhází.
 \item Ačkoliv je SVG obrázek několikanásobně větší, než ve finální aplikaci použitý PNG obrázek, došlo by k výraznému uspoření místa -- shodný obrázek by se použil mnohokrát.
 \item Pro ušetření dalšího místa (50--80 \% \cite{SvgzAdobe}) je možné obrázek zkomprimovat gzip kompresí do formátu SVGZ.
\end{itemize}

Prototyp takového jednoduchého SVG obrázku, kterému se parametrem \texttt{select} přiřadí identifikátor místnosti, kterou má zobrazit, (\texttt{funkcniObrazek?select=kn-e-9}), je na přiloženém CD. Toto chování se dá napodobit i u obyčejných PNG obrázků -- překrýváním, spodní vrstva bude obrázek s mapou a na ten se budou pozicovat ukazatele označující hledanou místnost. Toto řešení ale také nefunguje v praxi (viz omezení \ref{subs:rozvrzeniObrazku}). Prototyp je opět na CD.

\subsection{Objektově orientovaná implementace}
Tento problém je z trochu jiného oboru, mobilní specifikace ECMAScriptu totiž nepodporuje (náročné) objekty, a v implementaci tak musí být nahrazeny poli, poli polí, ničemu nepřiřazenými metodami a podobnými méně přehlednými konstrukty.

\subsection{Integrace jiných webových služeb}
Tato vlastnost není moc důležitá a v analýze byla zavrhnuta, přesto má v sobě nějaký potenciál. Stálo by za to promyslet například zjišťování názvu učebny, ve které má student následující hodinu, z jeho online rozvrhu a podle toho ji pak vyhledat. Použité technologie to ale moc nezvládají.



\section{Finální implementace}
Vlivem různých omezení mobilních zařízení (viz sekce \ref{sec:omezeniZarizeni}) a prohlížečů (viz sekce \ref{sec:omezeniProhlizecu}) nevypadá finální implementace úplně tak, jak bylo zamýšleno, přesto zadání splňuje. Téměř už dokončená aplikace byla před nasazením otestována (viz sekce \ref{sec:testVTerenu}).

Samotná aplikace není nijak složitá, a proto ani její rozsah není příliš veliký. Je rozdělena do následujících čtyř souborů:
\begin{itemize}
\item \emph{index.html} -- hlavní soubor aplikace, volá ostatní; obsahuje statické údaje,
\item \emph{data/db.js} -- databáze místností; stačí aktualizovat pouze tento soubor,
\item \emph{data/script.js} -- veškerá logika aplikace,
\item \emph{data/style.css} -- nastavení vzhledu aplikace.
\end{itemize}
K doplnění výčtu všech souborů patří ještě plány místností v adresáři \emph{data/maps/}.

\subsection{Vyhledávání}
Vyhledávání je realizováno jako prototyp\footnote{Pozor, nejedná se o prototyp ve smyslu zkušebního řešení, ECMAScript prototypem nazývá rozšíření stávajícího objektu.} pole. Parametrem funkce je hledaný řetězec, ten se převede na ECMAScriptový regulární výraz a tím se zkontroluje každá položka prohledávaného pole. Funkce vrátí buď pole nalezených indexů nebo \texttt{false} v případě, že byl hledaný výraz špatně sestaveným regulárním výrazem. Názvy místností se speciálními znaky regulárních výrazů nekolidují, takže k špatnému sestavení výrazu v praxi často nedochází.
\begin{verbatim}
Array.prototype.find = function (searchStr) {
  var returnArray = [];
  var regExp;
  //zpracování špatně sestaveného regulárního výrazu
  try {
    regExp = new RegExp(searchStr, 'i');
  } catch (error) {
    return false;
  }
  for (var i = 0; i < this.length; i++) {
    if (regExp.test(this[i])) {
      returnArray.push(i);
    }
  }
  return returnArray;
}
\end{verbatim}

\subsection{Změna obrazovky}
Pro umožnění odskočit si z vyhledávání do nápovědy a po návratu mít ve vyhledávacím formuláři ty samé údaje je potřeba, aby si aplikace udržela v paměti některá data, i když se přepne na jinou obrazovku. Běžně se používá pro každou obrazovku jiná HTML stránka, tam ale nedochází k podržení stavu.  Problém jsem vyřešil použitím jediné stránky, která obsahuje více \uv{obrazovek}, které se přepínají ECMAScriptem.
\begin{verbatim}
var recentlyDisplayedScreen = defaultScreen;
var preRecentlyDisplayedScreen;
function switchScreen(screen) {
  if (!screen) screen = preRecentlyDisplayedScreen;
  document.getElementById(recentlyDisplayedScreen).style.display = 'none';
  document.getElementById(screen).style.display = 'block';
  preRecentlyDisplayedScreen = recentlyDisplayedScreen;
  recentlyDisplayedScreen = screen;
}
\end{verbatim}

\begin{verbatim}
<div id="placesScreen" class="screen">
  ...
  <a href="#" onclick="switchScreen('helpScreen'); return false;">Nápověda</a></div>
  ...
</div>
\end{verbatim}

\subsection{Rozvržení databáze}
Databáze je optimalizována na nízký výkon mobilních zařízení, což spolu s faktem, že nelze použít objekty, které by držely související záznamy pospolu, vede k dost nepřehlednému řešení. Databáze je tvořena pěti poli:
\begin{itemize}
\item \texttt{placesAllMixed[]} -- Pole obsahující všechny vyhledatelné fráze a jejich verze s odstraněnou diakritikou. V tomto poli se vyhledává.
\item \texttt{placesAssignement[]} -- Pole přiřazující nalezené frázi z pole \texttt{placesAllMixed[]} název místnosti a alternativ z pole \texttt{placesAlternate[]}.
\item \texttt{placesAlternate[]} -- Pole obsahující oficiální název místnosti se všemi alternativami (starými názvy, sídlícími vyučujícími\dots).
\item \texttt{placesImg[]} -- Pole obsahující názvy obrázků, ve kterých jsou uloženy plánky konkrétních místností. (Názvy mohou obsahovat i parametry, v budoucnu, až to implementace SVG v mobilních zařízeních dovolí, mohou záznamy vypadat:\\ \texttt{kn-e-1np?select=kn-e-9\&show=wc}.)
\item \texttt{usedDiacritics[]} -- Pole obsahující v názvech místností obsažené znaky s diakritikou a jejich náhradu bez diakritiky - pole se nepoužívá při vyhledávání (zde by zpomalovalo zkoušení všech diakritických variant), ale až při zvýrazňování hledané fráze u~nalezených místností.
\end{itemize}

\subsection{Našeptávání vyhledávání}
Po každém stisku klávesy ve vyhledávacím formuláři se prohledá databáze. Aby nedocházelo ke zbytečným ztrátám na výkonu, aplikace kontroluje, jestli je zadaný výraz dlouhý alespoň dva znaky, protože listování všech výsledků trvá zbytečně dlouho, a také kontroluje, jestli nebyl odeslán ten samý výraz podruhé -- u desktopových prohlížečů by se asi nic takového nestalo, ale mobilní se většinou chovají tak, že počkají, až uživatel zadá celý text a~potvrdí ho, a~až poté teprve pro každou stisknutou klávesu vyvolají událost jejího stisknutí (viz problém \ref{subs:udalostiKlaves}). Stojí za to zmínit některé události, které se pro našeptávání hodí:
\begin{itemize}
\item Události vyvolané myší (dotykem) -- široce podporované, nepoužitelné ale z důvodu absence myši na většině mobilních zařízení.
\item Change (změna elementu) -- téměř ideální událost, bohužel se vyvolá až po opuštění elementu, navíc nefunguje všude.
\item Keypress (stisknutí a uvolnění klávesy) -- absence v iPhone, některé jiné prohlížeče nepodporují.
\item Keydown (stisknutí klávesy) -- v některých prohlížečích nefunguje nebo vyvolává událost vícekrát.
\item Keyup (uvolnění klávesy) -- funguje téměř všude, pro našeptávač je nejvhodnější událostí.
\item Reset (nastavení na výchozí hodnoty) -- funguje téměř všude bez problémů, ale využití této události je pro dané účely nevhodné.
\item Submit (odeslání formuláře) -- funguje téměř všude bez problémů, vyvolá ji ale až odeslání formuláře, v našeptávači může sloužit jako pojistka, když vyvolání nevyvolá žádná jiná událost.
\end{itemize}
Z výše uvedeného seznamu bohužel vyplývá, že není úplně univerzální řešení, kterým bychom se dozvěděli, že uživatel něco zadal a můžeme vyhledávat. Dobře zpracovaný přehled podpory událostí je na blogu QuirksMode \cite{EventCompatibility}.

\subsection{Aktualizace databáze}
Ačkoliv to nemusí být pro uživatele ideální, databáze aplikace se nedokáže vlivem použitých technologií sama aktualizovat. Uživatel má ale i přesto tři docela uspokojující možnosti:
\begin{itemize}
\item Použití aplikace online -- pokud má v připojení k Internetu.
\item Ruční aktualizace databáze -- stačí nahradit jediný soubor.
\item Neaktualizovat -- rozvržení učeben a kanceláří se tak často nemění.
\end{itemize}

\subsection{Stav implementace}
Implementace obsahuje databázi místností a mapové podklady pouze pro první dvě podlaží budovy E na Karlově náměstí. S vedoucím práce jsme usoudili, že se jedná o reprezentativní vzorek a že by bylo kontraproduktivní obíhat jiné budovy s pásmem a tvořit jejich plány (k této byly plány dostupné).

Implementace nefunguje ve webovém prohlížeči Internet Explorer do verze 8. Prohlížeče Internet Explorer jsou známy nedodržováním standardů a vzhledem k jejich určení pro desktopy se nejedná o velikou ztrátu. Aplikace nefunguje bohužel ani v mobilní verzi prohlížeče Internet Explorer, to už je větší problém, naštěstí jsou na těchto zařízeních dostupné i jiné prohlížeče, které nemají s aplikací problém.\footnote{Všechny zařízení, které jsem viděl a měly v sobě mobilní verzi Internet Exploreru, měly nastavenou jako výchozí prohlížeč Operu Mobile.}

\subsection{Tvorba databáze}
Ačkoliv to nebylo obsahem práce, vytvořil jsem jednoduchý PHP skript na tvorbu databáze místností, podstatně zjednodušuje i její správu. Skript je ale velmi naivní, neošetřuje vstupy a nenabízí tolik možností, kolik by bylo pro pohodlnou správu administrativním pracovníkem potřeba. Toto je jedna z oblastí, kde by se dalo v budoucnu pokračovat. Skript je přiložen na CD.



\section{Omezení mobilních zařízení}
\label{sec:omezeniZarizeni}
Následující sekce je zaměřena na některá omezení mobilních zařízení, na která jsem při práci narazil a musel je nějak vyřešit. Většina jich je spjatá s menší velikostí a mobilitou těchto zařízení. U každého omezení je uveden \emph{problém}, který činí; viník, který omezení \emph{způsobuje}; jaké by mohlo být \emph{řešení} a jakou má \emph{závažnost} -- ta se pro jednoduchost dělí pouze na vysokou, střední a nízkou.
\subsection{Malá velikost displeje}
\begin{description*}
\item[Problém:] Velikost displeje neumožňuje vtěsnat potřebné množství informací na obrazovku.
\item[Způsobuje:] Malý displej zařízení.
\item[Řešení:] Současně žádné vhodné neexistuje. V budoucnosti se možná objeví skládací displeje a jiné technologie, které zachovají malou velikost zařízení, ale nabídnou větší zobrazovací plochu.
\item[Závažnost:] Vysoká.
\end{description*}

\subsection{Nízký výkon}
\begin{description*}
\item[Problém:] Zařízení mají malý výkon a nezvládají náročnější algoritmy.
\item[Způsobuje:] Nízký výkon mobilních zařízení.
\item[Řešení:] Je nutné nejen optimalizovat, ale také se omezit na méně náročné algoritmy. V~současné době navíc vývoj mobilních zařízení v oblasti výkonu natolik pokročil, že toto omezení přestává mít význam. Je jen otázkou času, kdy klesnou na ceně a rozšíří se.
\item[Závažnost:] Střední.
\end{description*}

\subsection{Špatná správa paměti}
\begin{description*}
\item[Problém:] Při načítání velké stránky dojde k zaplnění paměti a zatuhnutí telefonu.
\item[Způsobuje:] Špatná implementace správy paměti (dáno pravděpodobně malými možnostmi mobilních zařízení).
\item[Řešení:] Snažit se omezit paměťovou náročnost algoritmů a grafického rozhraní.
\item[Závažnost:] Vysoká.
\end{description*}

\section{Omezení mobilních prohlížečů}
\label{sec:omezeniProhlizecu}
Následující sekce je zaměřena na některá omezení testovaných prohlížečů. Ne pokaždé se tato omezení vztahují na mobilní prohlížeče a ne pokaždé jsou častá -- pro svou závažnost bylo zařazeno i několik výjimek. U každého omezení je uveden \emph{problém}, který činí; viník, který omezení \emph{způsobuje}; jakých prohlížečů se omezení \emph{týká}; jaké by mohlo být \emph{řešení} a jaká zůstane omezení \emph{závažnost}, pokud vezmeme v úvahu dostupná řešení. Testované prohlížeče v~položce \emph{týká se} jsou především Arora, BlackBerry Browser, Internet Explorer Mobile, Konqueror, Mozilla Firefox, NetFront Browser, Nokia Mini Map Browser, Opera Mini a~Opera Mobile. \emph{Závažnost} se pro jednoduchost dělí pouze na vysokou, střední a nízkou.
\subsection{Prohlížeč neumí popisky}
\begin{description*}
\item[Problém:] Prohlížeč neumí zobrazovat popisky \texttt{title} elementů.
\item[Způsobuje:] Absence pokročilých polohovacích zařízení v mobilních zařízeních, malé displeje a z toho plynoucí špatná použitelnost těchto popisků.
\item[Týká se:] Téměř každého mobilního prohlížeče.
\item[Řešení:] Řešením by mohlo být si pomocí HTML a ECMASctiptu vytvořit vlastní popisky, v tomto prostředí je ale lepší absenci popisků přizpůsobit design a vůbec je nepoužívat.
\item[Závažnost:] Nízká.
\end{description*}

\subsection{Nestandardní implementace událostí kláves}
\label{subs:udalostiKlaves}
\begin{description*}
\item[Problém:] Text se často zadává místo rovnou do formuláře někam stranou a nedají se pak odchytávat události stisknutí jednotlivých kláves. Pokud je v prohlížeči vyvolána událost stisknutí klávesy, děje se tak až po odeslání celého textu.
\item[Způsobuje:] Nestandardní implementace -- v mobilním prostředí přináší výhody, uživatel může zadávat text způsoby, kterými je zvyklý z jiných míst zařízení.
\item[Týká se:] Téměř každého mobilního prohlížeče.
\item[Řešení:] Řešení neexistuje, dá se ale spokojit s událostí stisku klávesy vyvolanou po zadání celého textu.
\item[Závažnost:] Střední.
\end{description*}

\subsection{Absence kurzoru}
\begin{description*}
\item[Problém:] Prohlížeče umožňují aktivovat pouze určité oblasti, zpravidla odkazy; neumožňují použití obrázkových map a odchytávávání událostí vyvolaných kliknutím na jiné elementy.
\item[Způsobuje:] Absence kurzoru (nebo použití jiného ukazatele -- např. prstu) nebo jeho omezený pohyb.
\item[Týká se:] Téměř každého mobilního prohlížeče.
\item[Řešení:] Řešení neexistuje, dá se zčásti obejít vhodným návrhem.
\item[Závažnost:] Střední.
\end{description*}

\subsection{Zmenšování obrázků}
\begin{description*}
\item[Problém:] Ve výchozím nastavení prohlížeče optimalizují (mj.) velikosti obrázků pro malé displeje a neumožňují tím pádem zobrazovat obrázky ve větším rozlišení.
\item[Způsobuje:] Optimalizace velikosti obrázků.
\item[Týká se:] Téměř každého mobilního prohlížeče.
\item[Řešení:] Řešení neexistuje, dá se někdy obejít -- v určitých případech odeslat místo celé HTML stránky samotný obrázek, některé prohlížeče mají implementované posouvání, zvětšování, ukládání a další funkce pro práci s obrázky.
\item[Závažnost:] Vysoká.
\end{description*}

\subsection{Špatné škálování obrázků}
\begin{description*}
\item[Problém:] Prohlížeč při zadané maximální šířce obrázku nepřeškáluje v případě potřeby podle specifikace \cite{CssDoc} i výšku obrázku.
\item[Způsobuje:] Chyba v implementaci CSS vlastnosti \texttt{max-width}.
\item[Týká se:] Nokia Mini Map Browser, BlackBerry Browser.
\item[Řešení:] Dalo by se obejít použitím hacků, které by ale nezaručily, že nezpůsobí chyby v~jiných, netestovaných prohlížečích.
\item[Závažnost:] Střední.
\end{description*}

\subsection{Optimalizace rozvržení obrázků}
\label{subs:rozvrzeniObrazku}
\begin{description*}
\item[Problém:] Ve výchozím nastavení prohlížeče optimalizují (mj.) rozvržení obrázků pro malé displeje, čímž ale zároveň nastává přesouvání přesně rozvržených obrázků na špatná místa.
\item[Způsobuje:] Optimalizace rozvržení obrázků.
\item[Týká se:] Téměř každého mobilního prohlížeče.
\item[Řešení:] Řešení neexistuje. Dá se obejít předgenerováním možných situací do jediných obrázků, pokud to omezená množina situací a velikost paměti zařízení dovolí.
\item[Závažnost:] Vysoká.
\end{description*}

\subsection{Nefunkčnost lokální URI s parametry}
\begin{description*}
\item[Problém:] Prohlížeč nedokáže rozpoznat parametry URI a považuje je za součást adresy, nemůže tím pádem nalézt požadované lokální soubory (na požadavek \texttt{index.html?var=val} nedokáže vrátit soubor \emph{index.html}).
\item[Způsobuje:] Neimplementovaná práce s parametry lokální URI.
\item[Týká se:] NetFront Browser.
\item[Řešení:] Řešení neexistuje. V určitých případech se dá obejít chyba nenalezení souboru, například SVG obrázek se dá požadovat pomocí elementu \texttt{<object>} a parametry místo do~URI uvést do~vnořeného elementu \texttt{<param>}.
\item[Závažnost:] Vysoká.
\end{description*}

\subsection{Nefunkčnost ECMAScriptového skriptu s příponou \emph{es}}
\begin{description*}
\item[Problém:] Prohlížeč nedokáže zpracovat ECMAScriptový soubor se standardní příponou es.
\item[Způsobuje:] Neimplementovaná podpora přípony es.
\item[Týká se:] BlackBerry Browser.
\item[Řešení:] Řešením, byť ne sémanticky dokonalým, je přejmenování přípony ECMAScriptu es na příponu JavaScriptu js.
\item[Závažnost:] Nízká.
\end{description*}

\subsection{V ECMAScriptových RegExpech chybí zpětná reference na celý výraz}
\begin{description*}
\item[Problém:] Prohlížeč neumí v regulárních výrazech zpětnou referenci na celý výraz -- \texttt{\$\&}.
\item[Způsobuje:] Chyba v prohlížeči.
\item[Týká se:] Nokia Mini Map Browser.
\item[Řešení:] Obalení celého výrazu do závorek pro vytvoření zpětné reference. Referencuje se pomocí čísla -- \texttt{\$1} a ostatní zpětné reference se inkrementují.
\item[Závažnost:] Nízká.
\end{description*}

\subsection{V ECMAScriptových RegExpech nefunguje vyhledávání bez rozlišování velikosti písmen}
\begin{description*}
\item[Problém:] Prohlížeč neumí vyhledávat v regulárních výrazech bez rozlišování velikosti, pokud jsou zadána pouze malá písmena.
\item[Způsobuje:] Chyba v prohlížeči.
\item[Týká se:] Nokia Mini Map.
\item[Řešení:] Žádné nenalezeno. Dá se obejít použitím jiného prohlížeče, na stejné platformě, jako Nokia Mini Map, funguje i Opera Mobile.
\item[Závažnost:] Střední.
\end{description*}

\subsection{Prohlížeč nepodporuje SVG obrázky}
\begin{description*}
\item[Problém:] Prohlížeč neumí zpracovat a zobrazit SVG obrázky.
\item[Způsobuje:] SVG není implementované.
\item[Týká se:] BlackBerry Browser.
\item[Řešení:] Žádné nenalezeno. SVG lze nahradit i jinou technologií, například PNG obrázky, ztrácíme ale možnost znovupoužití částí SVG kódu, obrázky musíme mít pro každou situaci předgenerované a výrazně tak narůstá paměťová náročnost.
\item[Závažnost:] Střední.
\end{description*}

\subsection{Prohlížeč dynamicky nenačte SVG obrázky}
\begin{description*}
\item[Problém:] Prohlížeč neumí (pomocí ECMAScriptu) dynamicky zobrazit SVG obrázky.
\item[Způsobuje:] Příčina se nepodařila zjistit, pravděpodobně se jedná o chybu nebo výkonnostní omezení prohlížeče.
\item[Týká se:] NetFront Browser.
\item[Řešení:] Žádné nenalezeno. SVG lze nahradit i jinou technologií, například PNG obrázky, ztrácíme ale možnost znovupoužití částí SVG kódu, obrázky musíme mít pro každou situaci předgenerované a výrazně tak narůstá paměťová náročnost.
\item[Závažnost:] Střední.
\end{description*}

\subsection{Prohlížeč neumí zpracovat ECMAScript uvnitř SVG obrázku}
\begin{description*}
\item[Problém:] Prohlížeč neumí zpracovat ECMAScript v obrázku a nedají se tím pádem například generovat plánky přímo za chodu aplikace.
\item[Způsobuje:] Implementace SVG Tiny podle verze 1.1; verze 1.2 už problém řeší.\footnote{Část specifikace SVG Tiny zabývající se skriptováním je pro verzi 1.1 dostupná na \cite[\texttt{/\#sec-scripting}]{SvgTiny11Doc} a verzi 1.2 na \cite[\texttt{/script.html}]{SvgTiny12Doc}.}
\item[Týká se:] Prohlížečů s implementací SVG nižší, než 1.2.
\item[Řešení:] Žádné nenalezeno, lze použít předgenerované obrázky (a zabrat více místa).
\item[Závažnost:] Střední.
\end{description*}

\subsection{Prohlížeč neumí otevřít lokálně uložené SVGZ}
\begin{description*}
\item[Problém:] Prohlížeč neumí otevřít lokálně uložený komprimovaný SVG obrázek.\footnote{V hlavičce požadavku se neobjeví, že se jedná o komprimovaný soubor. Viz \cite{SvgzFirefox}.}
\item[Způsobuje:] Chyba v prohlížeči.
\item[Týká se:] Mozilla Firefox.
\item[Řešení:] Žádné nenalezeno, lze obejít použitím obrázků bez komprimace.
\item[Závažnost:] Střední.
\end{description*}
